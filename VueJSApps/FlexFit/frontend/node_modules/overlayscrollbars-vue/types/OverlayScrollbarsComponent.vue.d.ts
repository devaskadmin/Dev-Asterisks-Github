import { type PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    element: {
        type: PropType<string | import("vue").Component>;
        default: string;
    };
    options: {
        type: PropType<false | {
            paddingAbsolute?: boolean | undefined;
            showNativeOverlaidScrollbars?: boolean | undefined;
            update?: {
                elementEvents?: [elementSelector: string, eventNames: string][] | null | undefined;
                debounce?: number | [timeout: number, maxWait: number] | null | undefined;
                attributes?: string[] | null | undefined;
                ignoreMutation?: ((mutation: MutationRecord) => any) | null | undefined;
            } | undefined;
            overflow?: {
                x?: import("overlayscrollbars").OverflowBehavior | undefined;
                y?: import("overlayscrollbars").OverflowBehavior | undefined;
            } | undefined;
            scrollbars?: {
                theme?: string | null | undefined;
                visibility?: import("overlayscrollbars").ScrollbarsVisibilityBehavior | undefined;
                autoHide?: import("overlayscrollbars").ScrollbarsAutoHideBehavior | undefined;
                autoHideDelay?: number | undefined;
                autoHideSuspend?: boolean | undefined;
                dragScroll?: boolean | undefined;
                clickScroll?: boolean | undefined;
                pointers?: string[] | null | undefined;
            } | undefined;
        } | null | undefined>;
    };
    events: {
        type: PropType<false | {
            initialized?: ((instance: import("overlayscrollbars").OverlayScrollbars) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars) => void)[] | null | undefined;
            updated?: ((instance: import("overlayscrollbars").OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void)[] | null | undefined;
            destroyed?: ((instance: import("overlayscrollbars").OverlayScrollbars, canceled: boolean) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars, canceled: boolean) => void)[] | null | undefined;
            scroll?: ((instance: import("overlayscrollbars").OverlayScrollbars, event: Event) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars, event: Event) => void)[] | null | undefined;
        } | null | undefined>;
    };
    defer: {
        type: PropType<boolean | IdleRequestOptions | undefined>;
    };
}, {
    osInstance(): import("overlayscrollbars").OverlayScrollbars | null;
    getElement(): HTMLElement | null;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    osInitialized: (instance: import("overlayscrollbars").OverlayScrollbars) => void;
    osUpdated: (instance: import("overlayscrollbars").OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void;
    osDestroyed: (instance: import("overlayscrollbars").OverlayScrollbars, canceled: boolean) => void;
    osScroll: (instance: import("overlayscrollbars").OverlayScrollbars, event: Event) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    element: {
        type: PropType<string | import("vue").Component>;
        default: string;
    };
    options: {
        type: PropType<false | {
            paddingAbsolute?: boolean | undefined;
            showNativeOverlaidScrollbars?: boolean | undefined;
            update?: {
                elementEvents?: [elementSelector: string, eventNames: string][] | null | undefined;
                debounce?: number | [timeout: number, maxWait: number] | null | undefined;
                attributes?: string[] | null | undefined;
                ignoreMutation?: ((mutation: MutationRecord) => any) | null | undefined;
            } | undefined;
            overflow?: {
                x?: import("overlayscrollbars").OverflowBehavior | undefined;
                y?: import("overlayscrollbars").OverflowBehavior | undefined;
            } | undefined;
            scrollbars?: {
                theme?: string | null | undefined;
                visibility?: import("overlayscrollbars").ScrollbarsVisibilityBehavior | undefined;
                autoHide?: import("overlayscrollbars").ScrollbarsAutoHideBehavior | undefined;
                autoHideDelay?: number | undefined;
                autoHideSuspend?: boolean | undefined;
                dragScroll?: boolean | undefined;
                clickScroll?: boolean | undefined;
                pointers?: string[] | null | undefined;
            } | undefined;
        } | null | undefined>;
    };
    events: {
        type: PropType<false | {
            initialized?: ((instance: import("overlayscrollbars").OverlayScrollbars) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars) => void)[] | null | undefined;
            updated?: ((instance: import("overlayscrollbars").OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void)[] | null | undefined;
            destroyed?: ((instance: import("overlayscrollbars").OverlayScrollbars, canceled: boolean) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars, canceled: boolean) => void)[] | null | undefined;
            scroll?: ((instance: import("overlayscrollbars").OverlayScrollbars, event: Event) => void) | ((instance: import("overlayscrollbars").OverlayScrollbars, event: Event) => void)[] | null | undefined;
        } | null | undefined>;
    };
    defer: {
        type: PropType<boolean | IdleRequestOptions | undefined>;
    };
}>> & {
    onOsInitialized?: ((instance: import("overlayscrollbars").OverlayScrollbars) => any) | undefined;
    onOsUpdated?: ((instance: import("overlayscrollbars").OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => any) | undefined;
    onOsDestroyed?: ((instance: import("overlayscrollbars").OverlayScrollbars, canceled: boolean) => any) | undefined;
    onOsScroll?: ((instance: import("overlayscrollbars").OverlayScrollbars, event: Event) => any) | undefined;
}, {
    element: string | import("vue").Component;
}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
